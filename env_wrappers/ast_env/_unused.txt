    # def _get_obs(self):    
    #     # Get raw values
    #     position                = np.array([self.assets[0].ship_model.north, self.assets[0].ship_model.east, self.assets[0].ship_model.yaw_angle], dtype=np.float32)
    #     speed                   = np.array([self.assets[0].ship_model.speed], dtype=np.float32)
    #     cross_track_error       = np.array([self.assets[0].ship_model.auto_pilot.navigate.e_ct], dtype=np.float32)
    #     wind                    = np.array([self.wind_model.init_Ubar, self.wind_model.config.initial_wind_direction], dtype=np.float32)
    #     wave                    = np.array([self.current_model.config.initial_current_velocity, self.current_model.config.initial_current_direction], dtype=np.float32)
        
    #     position_norm           = self._normalize(position, self.position_range["min"], self.position_range["max"])
    #     speed_norm              = self._normalize(speed, self.speed_range["min"], self.speed_range["max"])
    #     cross_track_error_norm  = self._normalize(cross_track_error, self.cross_track_error_range["min"], self.cross_track_error_range["max"])
    #     wind_norm               = self._normalize(wind, self.wind_range["min"], self.wind_range["max"])
    #     wave_norm               = self._normalize(wave, self.wave_range["min"], self.wave_range["max"])

    #     observation         = {
    #         "position"          : position_norm,
    #         "speed"             : speed_norm,
    #         "cross_track_error" : cross_track_error_norm,
    #         "wind"              : wind_norm,
    #         "wave"              : wave_norm
    #     }
        
    #     return observation
    
    # def init_observation_space(self):
    #     # # Observation space
    #     # minx, miny, maxx, maxy           = self.map_frame.total_bounds
    #     # # North ship position
    #     # north_min, north_max             = np.array([miny, maxy])
    #     # # East ship position
    #     # east_min, east_max               = np.array([minx, maxx])
    #     # # Ship heading (in NED)
    #     # heading_min, heading_max         = np.array([-np.pi, np.pi])
    #     # # Ship speed
    #     # speed_min, speed_max             = np.array([0.0, 20.0])
    #     # # LOS guidance ship cross track error (absolute)
    #     # e_ct_min, e_ct_max               = np.array([0.0, 3000.0])
    #     # # Wind speed
    #     # U_w_min, U_w_max                 = np.array([0.0, 32.9244444])
    #     # # Wind and Wave direction
    #     # psi_ww_min, psi_ww_max           = np.array([-np.pi, np.pi])
    #     # # Current speed
    #     # U_c_min, U_c_max                 = np.array([0.0, 5.0])
    #     # # Current direction
    #     # psi_c_min, psi_c_max             = np.array([-np.pi, np.pi])
        
    #     # self.observation_space = Box(
    #     #     low  = np.array([north_min, east_min, heading_min, speed_min, e_ct_min, U_w_min, psi_ww_min, U_c_min, psi_c_min], dtype=np.float32),
    #     #     high = np.array([north_max, east_max, heading_max, speed_max, e_ct_max, U_w_max, psi_ww_max, U_c_max, psi_c_max], dtype=np.float32),
    #     # )
        
    #     self.observation_space = gym.spaces.Dict(
    #         {
    #             "position"          : Box(-1.0, 1.0, shape=(3,)),
    #             "speed"             : Box(-1.0, 1.0, shape=(1,)),
    #             "cross_track_error" : Box(-1.0, 1.0, shape=(1,)),
    #             "wind"              : Box(-1.0, 1.0, shape=(2,)),
    #             "wave"              : Box(-1.0, 1.0, shape=(2,))
    #         }
    #     )